@page "/blog"

@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore

@using Data
@using Data.Models
@using Services
@inject IDbContextFactory<ApplicationDbContext> ContextFactory
@inject AuthenticationStateProvider authState
@inject IMailService mailer
<h1>Blog</h1>

@if (User.IsAuthenticated)
{
    <h2>Add Entry</h2>
    <div>
        <input placeholder="Title" @bind="title" />
    </div>
    <div>
        <textarea placeholder="Post" @bind="content"></textarea>
    </div>
    <div>
        <button @onclick="AddEntry">Add</button>
    </div>
}
<hr />
<div class="blog">
    @foreach (BlogEntry entry in blogEntries)
    {
        <BlogEntryView Entry="@entry" />
    }
</div>

@code {
    private List<BlogEntry> blogEntries = new List<BlogEntry>();
    private List<string> CommentStrings = new List<string>();

    private string title, content;

    private System.Security.Principal.IIdentity User;

    protected override async Task OnInitializedAsync()
    {
        using var db = ContextFactory.CreateDbContext();

        blogEntries.AddRange(await db.Entries.Include(u => u.User).Include(c => c.Comments).ToListAsync());

        var astate = await authState.GetAuthenticationStateAsync();
        User = astate.User.Identity;
    }

    private async Task AddEntry()
    {
        if (!string.IsNullOrWhiteSpace(title) && !string.IsNullOrWhiteSpace(content) && User.IsAuthenticated)
        {
            using var db = ContextFactory.CreateDbContext();

            var iuser = await db.Profiles.Where(u => u.UserName == User.Name).FirstOrDefaultAsync<IdentityUser>();

            var entry = new BlogEntry { Title = title, Content = content, Time = DateTime.Now, User = iuser };

            db.Entries.Add(entry);
            await db.SaveChangesAsync();
            blogEntries.Add(entry);
            await mailer.SendEmail(iuser.NormalizedEmail, "Saved a blog entry", $"A blog entry was added to the app:<p>{entry.Content}</p>");

        }
    }

}
